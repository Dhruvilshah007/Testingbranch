package ImportantJavaConcepts.SerializationDesesializationConcept;

import java.io.*;

public class SerializationEg implements Serializable {

    String name;
    int id;

  /*  SerializationEg(int id,String name){
        this.id=id;
        this.name=name;
    }
*/
    public static void main(String[] args) {

        SerializationEg obj=new SerializationEg();

        obj.name="Dds";
        obj.id=3;

        try {
            FileOutputStream fos=new FileOutputStream("demo.txt");

            //serializing object
            ObjectOutputStream oos=new ObjectOutputStream(fos);
            oos.writeObject(obj);

            //close output stream
            oos.close();

            //close file
            fos.close();

            System.out.printf("Object serialized");

//            So the object is converted to a byte-stream. Hence, serialization is complete.

            //so here we are not able to serializable because SerializationEg doesn't implement java.io.Serializable.It will work after that only.


        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            e.printStackTrace();

            //The printStackTrace() method in Java is a tool used to handle exceptions and errors. It is a method of Java's throwable class which prints the throwable along with other details like the line number and class name where the exception occurred.
        }
/*        System.out.println(obj.id);
        System.out.println(obj.name);*/

    }
}


//link -  https://www.scaler.com/topics/java/serialization-in-java/

/*

Overview

An object's state can be transformed into a byte stream through a process known as serialization. Deserialization is the reverse procedure, in which the actual Java object is recreated in memory using the byte stream. The generated byte stream is cross-platform. Therefore, an object that has been serialized on one platform can be deserialized on another platform.


Introduction to Serialization in Java

Ever wondered in the Java world, how data is sent over the network or how youâ€™re able to save files on a disk. Well, all this is possible thanks to something called Serialization and Deserialization.

Serialization is the process of converting the state of an object into a byte stream. A byte-stream is a Java I/O (Input/Output) stream which is essentially flows of data that a programmer can either read from or write to. Byte Streams read or write one byte of data at a time.

Great! Now we have converted the object into a byte-stream which can be saved onto a disk, communicated over the network, etc.

However, to use them again, we need to convert these byte-streams back to their respective Objects. This reverse process of converting object into byte-stream is called Deserialization.
 */