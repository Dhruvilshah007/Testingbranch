package ImportantJavaConcepts.ObjectClassMethods;

public class HashCodeMethod {

    int car_no;

    HashCodeMethod(int car_no){
        this.car_no=car_no;
    }

    @Override
    public int hashCode() {
        return car_no;
    }

    public static void main(String[] args) {

        HashCodeMethod obj=new HashCodeMethod(20);

        HashCodeMethod obj2=new HashCodeMethod(21);

        System.out.println(obj.hashCode());
        System.out.println(obj2.hashCode());

        /*The above code shows the default behavior of the hashCode() method. Here we have not overridden the hashCode() method.
        Override of hashCode() method needs to be done in such a way that for every object we are can generate a unique number.*/

    }
}



/*

hashcode() - converts an object's internal address to an integer through an algorithm

A hash code is an integer value that gets generated by the hashing algorithm. Hash code is associated with each object in Java and is a distinct value. It converts an object's internal address to an integer through an algorithm. It is not the memory address, it is the integer representation of the memory address.

Another point to be noted is that this method is a Native method. A native method allows us to use code from another language like C, C++ in Java. In Java, we cannot find the memory address of objects, so the hashCode() method is written in C or C++ which fetches the object's address in Java.

Hash Codes are usually displayed in hexadecimal because if we represent them in this way it is easier for us to retain them in our short-term memory since hexadecimal numbers are shorter and they have a larger character variety as compared to the same numbers expressed in decimal.
 */